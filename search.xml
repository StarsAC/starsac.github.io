<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HP 600G1 DM 微型主机安装黑苹果</title>
    <url>/2024/05/14/HP-600G1-DM-%E5%BE%AE%E5%9E%8B%E4%B8%BB%E6%9C%BA%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/hp600g1.jpg"
                      alt="hp600g1"
                ></h2><h2 id="0-硬件选择"><a href="#0-硬件选择" class="headerlink" title="0.硬件选择"></a>0.硬件选择</h2><h3 id="01-准系统选择"><a href="#01-准系统选择" class="headerlink" title="01.准系统选择"></a>01.准系统选择</h3><p>在2024年3月节点, 200元左右价位可选的小主机准系统大概有以下几种型号 :</p>
<ul>
<li><p>联想 : m73, m73p, m93p, m7300hq</p>
<ul>
<li>其中m7300hq为m73的国内版本</li>
</ul>
<blockquote>
<p>m73的黑苹果算是比较成熟的, 网上的教程也很多, 但是这台机器由于BIOS有网卡白名单机制, 如果更换黑苹果免驱网卡需要刷BIOS, 较为麻烦且风险较大, 如果不动BIOS在开机的时候会有报警提示音, 因此只能拔掉喇叭使用. 此外m73没有m.2固态硬盘位, 拓展性稍差.</p>
</blockquote>
</li>
<li><p>戴尔 :</p>
<ul>
<li>Optiplex 3020m</li>
</ul>
<blockquote>
<p>戴尔的机器价格比较贵, 支持4代CPU的大概只有这一个选择, 且这个机器存量较少, 性价比低.</p>
</blockquote>
</li>
<li><p>惠普 : </p>
<ul>
<li><a class="link"   href="https://support.hp.com/cn-zh/product/details/hp-prodesk-400-g1-desktop-mini-pc/7519860" >HP ProDesk 400 G1 微型台式电脑 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://support.hp.com/cn-zh/product/product-specs/hp-prodesk-600-g1-desktop-mini-pc/6595197" >HP ProDesk 600 G1 微型台式电脑 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://support.hp.com/cn-zh/product/details/hp-elitedesk-800-g1-desktop-mini-pc/6595205" >HP EliteDesk 800 G1 微型台式电脑 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<blockquote>
<p>三款机型差别如下, 其他配置参照官网文档</p>
</blockquote>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>芯片组</th>
<th>USB数量</th>
<th>DP接口数量</th>
</tr>
</thead>
<tbody><tr>
<td>400G1</td>
<td>H81</td>
<td>2*3.0 + 4*2.0</td>
<td>1</td>
</tr>
<tr>
<td>600G1</td>
<td>Q85</td>
<td>4*3.0 + 2*2.0</td>
<td>2</td>
</tr>
<tr>
<td>800G1</td>
<td>Q87</td>
<td>6*3.0</td>
<td>2</td>
</tr>
</tbody></table>
<p>三款机型中400G1和600G1为同一价位, 800G1稍贵, 综合来看, 600G1性价比更高一些. 400G1支持TDP最高35W的四代CPU, 上TDP更高的CPU会开机报错, 不过可以按F1键跳过报错继续开机. 三款机型均支持nvme硬盘, 但不支持开机引导, 后期可以通过魔改BIOS来实现nvme硬盘引导.</p>
<p>综合考虑, 600G1性价比较高. 最终选择600G1准系统 + 原装65W电源.</p>
<h3 id="02-CPU选择"><a href="#02-CPU选择" class="headerlink" title="02.CPU选择"></a>02.CPU选择</h3><p>当前时间节点四代i3的T后缀处理器价格为25-50元不等, 四代i5的T后缀处理器价格要高一倍不止, 遂最终选择i3-4360T, 主机原生支持, 不用修改BIOS.</p>
<h3 id="03-内存选择"><a href="#03-内存选择" class="headerlink" title="03.内存选择"></a>03.内存选择</h3><p>当前时间节点DDR3代笔记本内存已经相当便宜, 最终选择单条8GB三星DDR3笔记本内存.</p>
<h3 id="04-硬盘选择"><a href="#04-硬盘选择" class="headerlink" title="04.硬盘选择"></a>04.硬盘选择</h3><p>小主机仅原生支持AHCI协议的PCIe固态硬盘, 这种硬盘现已被淘汰且存货量稀少,二手价格高昂. 支持NVMe引导需要修改BIOS较为麻烦, 遂最终选择120GB三星SATA固态.</p>
<h3 id="05-网卡选择"><a href="#05-网卡选择" class="headerlink" title="05.网卡选择"></a>05.网卡选择</h3><p>由于要装黑苹果系统, 网卡选择范围很小, 基本只有Broadcom的几款黑苹果免驱显卡. 最终选择BCM943224 + NGFF转接板 + 内置天线.</p>
<h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1.前期准备"></a>1.前期准备</h2><h3 id="11-下载写盘工具"><a href="#11-下载写盘工具" class="headerlink" title="11.下载写盘工具"></a>11.下载写盘工具</h3><p><a class="link"   href="https://etcher.balena.io/" >BalenaEtcher <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p>如果官网下载缓慢可以到<a class="link"   href="https://github.com/balena-io/etcher" >Github <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>或其镜像站点下载</p>
</blockquote>
<h3 id="12-下载恢复镜像"><a href="#12-下载恢复镜像" class="headerlink" title="12.下载恢复镜像"></a>12.下载恢复镜像</h3><ul>
<li><p><a class="link"   href="https://blog.daliansky.net/" >黑果小兵 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>上有很多懒人镜像, 赞助作者后即可下载.</p>
</li>
<li><p>根据<a class="link"   href="https://dortania.github.io/OpenCore-Install-Guide/installer-guide/" >OpenCore <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的官方指南(英文)自行下载恢复镜像进行配置.</p>
<blockquote>
<p>注意: 此方法安装时需要联网下载完整版安装镜像, 对网络环境要求较高.</p>
</blockquote>
</li>
</ul>
<h3 id="13-刷写U盘"><a href="#13-刷写U盘" class="headerlink" title="13.刷写U盘"></a>13.刷写U盘</h3><blockquote>
<p><em><strong>准备一个16GB以上容量的U盘, 确保U盘中所有资料已备份后再进行操作!!!</strong></em></p>
</blockquote>
<p>打开BalenaEtcher, 选择USB闪存盘和下载好的镜像, 点击开始烧录即可.</p>
<h3 id="14-制作EFI"><a href="#14-制作EFI" class="headerlink" title="14.制作EFI"></a>14.制作EFI</h3><ul>
<li><p><a class="link"   href="https://github.com/JeoJay127/RapidEFI-Tool" >RapidEFI <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>项目可使我们通过简单明了的图形化界面一键配置EFI, 只需选择对应的CPU平台, 处理器代数, 一些对应硬件参数即可一键生成EFI文件.</p>
</li>
<li><p>参考官方的<a class="link"   href="https://dortania.github.io/OpenCore-Install-Guide/" >OpenCore配置文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>进行配置.</p>
</li>
<li><p>一些优质的参考资源</p>
<ul>
<li><p><a class="link"   href="https://github.com/Road-tech/Hackintosh_HP-800G1_I7-4770hq_OC" >https://github.com/Road-tech/Hackintosh_HP-800G1_I7-4770hq_OC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://github.com/LemoFire/OpenCore-HP-800G1-DM-HD4600" >https://github.com/LemoFire/OpenCore-HP-800G1-DM-HD4600 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://github.com/shidongfei2/800g1" >https://github.com/shidongfei2/800g1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://github.com/vikingcabin/Hackintosh-HP-600G1-DM-BigSur-OC" >https://github.com/vikingcabin/Hackintosh-HP-600G1-DM-BigSur-OC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://github.com/LomotHo/Hackintosh-600g1-DM-4670t" >https://github.com/LomotHo/Hackintosh-600g1-DM-4670t <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://github.com/nidemimihihi/600G1-DM-BigSur-OC" >https://github.com/nidemimihihi/600G1-DM-BigSur-OC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<blockquote>
<p>如果安装BigSur级以上系统, 请通过USBToolBox定制USB.</p>
</blockquote>
</li>
</ul>
<h2 id="2-系统安装"><a href="#2-系统安装" class="headerlink" title="2.系统安装"></a>2.系统安装</h2><h3 id="21-BIOS设置"><a href="#21-BIOS设置" class="headerlink" title="21.BIOS设置"></a>21.BIOS设置</h3><p>首先将其更新到HP支持官网提供的最新版本(2019年发布的那版), 可先安装Win10系统, 在系统中对BIOS进行更新</p>
<blockquote>
<p><em><strong>注意 : 强烈建议更新完BIOS后手动按主板上的的CMOS清除按键进行重置</strong></em></p>
</blockquote>
<p>这个机器的BIOS设置项目非常非常少, 基本上保持默认即可, 记得修改U盘启动为第一启动项. </p>
<p>修改BIOS使其支持NVMe硬盘引导启动:<a class="link"   href="https://juejin.cn/post/7166643141179605022" >https://juejin.cn/post/7166643141179605022 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="22-进入OpenCore引导"><a href="#22-进入OpenCore引导" class="headerlink" title="22.进入OpenCore引导"></a>22.进入OpenCore引导</h3><p>如果配置无误, 现在开机应该已经可以进入OpenCore的引导界面了.</p>
<blockquote>
<p>如果没有配置过主题, 那么界面应该是黑色的命令行界面, 通过键盘上下键来选择启动项.</p>
<p>如果配置过主题, 那么界面应该是有背景的图形界面, 可以用鼠标选择启动项.</p>
</blockquote>
<blockquote>
<p>没有MacOS相关的启动选项? 可以先尝试按空格呼出隐藏选项(<code>____</code>之类的选项也可能是安装选项), 如果还没有, 可能需要重新烧录安装镜像.</p>
</blockquote>
<p>选择与MacOS有关的选项进入.</p>
<blockquote>
<p>如果遇到问题, 请首先尝试更换EFI, 如果仍然无法解决, 请尝试硬重置BIOS(按主板按键), 如果都卡在某一个地方代码不动, 那么可以参考官方的OpenCore文档, 里面有各种错误的排错指南.</p>
</blockquote>
<h3 id="23-安装macOS"><a href="#23-安装macOS" class="headerlink" title="23.安装macOS"></a>23.安装macOS</h3><p>如果一切顺利, 在经过一段时间的跑码之后就可以进入macOS的恢复菜单了.</p>
<p>这里可以在菜单栏处找到磁盘工具, 使用APFS格式抹掉磁盘. 然后就可以在安装器窗口看到你刚刚抹掉的磁盘了.</p>
<blockquote>
<p><em><strong>注意: 请务必备份硬盘里的重要资料后再进行操作.</strong></em></p>
</blockquote>
<p>接着就是选择刚刚创建的磁盘, 开始正式安装macOS.</p>
<blockquote>
<p>如果你和我一样安装的时候闲着无聊, 可以从左上角打开安装器日志, 体验看跑码的快乐(<em>^▽^</em>).</p>
</blockquote>
<p>在安装过程中, 电脑会经历数次重启, 在重启时启动项会发生变化, 请<em><strong>务必不要</strong></em>在显示OpenCore引导菜单时更改默认启动项, 否则将会导致安装失败.</p>
<p>如果一切顺利, 安装完成之后应该进入到了选择语言的界面, 之后的流程(OOBE)可以按照自己的习惯进行设置, 但请务必注意以下几点:</p>
<ul>
<li>OOBE时可以选择联网, 也可以不联网, 但在此时请不要登录iCloud及其相关在线服务, 跳过就好.</li>
<li>设置用户名时请<em><strong>务必不要</strong></em>设置中文, 且尽量设置一个自己将会长期使用的名字, 如果后期再修改用户名将会非常麻烦.</li>
<li>保存好自己设置的密码.</li>
</ul>
<p>在进入桌面后, 你可以检查各项硬件功能是否驱动成功, 如USB, 声卡, 显卡, 蓝牙, WIFI等是否正常工作, 如果硬件工作有问题, 请使用<code>OpenCore Configurator</code>挂载EFI分区, 并更换EFI文件.</p>
<h3 id="24-安装OpenCore-Configurator"><a href="#24-安装OpenCore-Configurator" class="headerlink" title="24.安装OpenCore Configurator"></a>24.安装OpenCore Configurator</h3><p>在<a class="link"   href="https://github.com/HackintoshFans/OpenCoreConfigurator" >Github页面 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>下载软件, 并在macOS安装.</p>
<p>在OpenCore Configurator里可以查看各个硬件的工作状态, 修改EFI文件, 挂载EFI分区, 功能十分强大.</p>
<h3 id="25-补全三码"><a href="#25-补全三码" class="headerlink" title="25.补全三码"></a>25.补全三码</h3><p>在刚装好系统的时候, 如果你尝试登录iCloud服务, 会发现是登不上去的, 究其原因就是我们还没有补全三码, 苹果服务器不信任我们的设备.</p>
<p>打开OpenCore Configurator, 在右上角菜单栏选择挂载EFI分区</p>
<blockquote>
<p>强烈建议将此时的EFI分区备份到桌面, 以防止EFI在编辑过程中损坏等情况.</p>
</blockquote>
<p>使用OpenCore Configurator打开<code>config.plist</code>文件, 在PlatformInfo选项下选择机型并点击Generate生成UUID, ROM(选择Mac,from System),序列号等信息, 点击保存即可. 删除原EFI分区中的文件, 并将修改好的EFI放入分区中.</p>
<blockquote>
<p>在生成序列号时, 可以前往苹果官网<a class="link"   href="https://checkcoverage.apple.com/" >查看设备的保障信息 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>查询序列号有效性, 一般来说, <strong>有效且未被使用的序列号 &gt; 无效的序列号 &gt; 已经被使用的序列号</strong>, 对于较老的机型, 刷到有效且未被使用的序列号可能性很小, 一般情况下使用无效序列号即可.</p>
</blockquote>
<p>接下来请重启, 此时可以移除安装U盘, <strong>在OpenCore引导菜单里按空格并选择CleanNVRAM</strong>, 之后回到引导主菜单再次启动即可.</p>
<p>进入系统后可以尝试登录iCloud, 如果还是提示<code>ICLOUD_UNSUPPORTED_DEVICE</code>之类的报错信息, 那么可能说明你的AppleID不太好, 请尝试更换符合下面要求的AppleID账号:</p>
<ul>
<li>至少绑定一个苹果设备(iPhone, iPad, mac)且正常使用至少一个月时间.</li>
<li>账号最近有iCloud使用记录, 最近在AppStore下载过软件(最好有购买记录)</li>
<li>绑定了至少一种支付方式(微信, 支付宝, 银联等)</li>
</ul>
<p>经过以上调整, 基本上就可以正常登录使用iCloud服务了.</p>
<h2 id="3-系统完善"><a href="#3-系统完善" class="headerlink" title="3.系统完善"></a>3.系统完善</h2><p>恭喜你, 经过以上的操作, 你的黑苹果主机已经可以正常使用了, 但是如果想要更加接近于白苹果的体验, 你还可以进行下面的操作.</p>
<ul>
<li><p>关闭”啰嗦模式”, 显示原汁原味的苹果进度条</p>
<p>和之前修改三码的步骤相同, 打开<code>config.plist</code>文件, 在NVRAM选项卡里点击UUID查找里面的<code>boot-args</code>键, 将值里面的<code>-v</code>删除, 覆盖EFI分区, 重启清理NVRAM之后就可以看到跑代码的界面已经消失.</p>
</li>
<li><p>添加<code>Audio.dxe</code>文件, 让黑苹果小主机开机时发出”Duang”的苹果开机音效.</p>
</li>
</ul>
<p>​	这部分请参考<a class="link"   href="https://blog.csdn.net/imacosx_cn/article/details/128883830" >OpenCore开机音频设置教程！_opencore configurator hdmi声音-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li><p>开启HiDPi, 让黑苹果在高分屏下的体验更好</p>
<p>这部分请参考<a class="link"   href="https://apple.sqlsec.com/7-%E5%AE%8C%E7%BE%8E%E9%BB%91%E6%9E%9C/7-1/#hidpi" >黑苹果 - 国光的黑苹果安装教程：手把手教你配置 OpenCore (sqlsec.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>解决睡眠睡死问题, 优化体验</p>
<p>简单粗暴的方法: 在<strong>系统偏好设置-节能</strong>里面设置显示器关闭时间, 并设置永不休眠, 可以达到类似睡眠的效果.</p>
<p>如果想彻底解决, 请参考<a class="link"   href="https://dortania.github.io/OpenCore-Post-Install/universal/sleep.html" >Fixing Sleep | OpenCore Post-Install (dortania.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<p>还有更多玩法, 期待你的探索.</p>
<h2 id="4-附录"><a href="#4-附录" class="headerlink" title="4.附录"></a>4.附录</h2><p>黑苹果的实现要归功于开源社区的无数开发者们的共同努力, 是他们让我们每一个人不用付昂贵的价钱购买苹果设备也可以低成本体验精彩的macOS和苹果生态.</p>
<p>2019年, 苹果发布了macOS11 BigSur系统和M1芯片并宣布转向ARM架构. 这个里程碑不仅标志着有15年历史的OSX的落幕, 同时也意味着黑苹果的生命进入了倒计时. 截至目前, macOS14 Sonoma依然提供x86架构的版本, 2019年Intel Xeon W处理器的MacPro依然在生命周期内, 但是再过几年呢? 苹果完全转向ARM之日, 就是黑苹果灭亡之时.</p>
<p>虽然黑苹果的技术终究会在历史中消亡, 但开源精神和”生命不息, 折腾不止”的意志定会激励一代代开发者们在计算机领域做出更大的贡献. </p>
<p>向OpenCore, Clover的开发人员,以及国内外为这项开源技术做出不懈贡献的伟大开发者们致敬 !</p>
<p>一些高质量的教程和参考资料:</p>
<p><a class="link"   href="https://apple.sqlsec.com/" >主页 - 国光的黑苹果安装教程：手把手教你配置 OpenCore (sqlsec.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://dortania.github.io/OpenCore-Install-Guide/" >OpenCore Install Guide (dortania.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.daliansky.net/" >黑果小兵的部落阁 (daliansky.net) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>平台:</p>
<p><a class="link"   href="https://github.com/" >GitHub: Let’s build from here · GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/" >哔哩哔哩 (゜-゜)つロ 干杯~-bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Hardware</category>
        <category>PC</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>Hardware</tag>
        <tag>OpenCore</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/05/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>[Arduino编程]使用LiquidCrystal_I2C库驱动LCD1602液晶显示屏</title>
    <url>/2024/05/13/imgbedtest/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://resources.starsac.cn/2024/10/lcd1602%20(3).png"
                      alt="lcd1602"
                ></p>
<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>LCD1602是一种16列2行的液晶显示屏, 可以显示数字, 拉丁字母和少量符号. 原版1602显示屏使用并行数据传输, 有8个数据引脚. 可通过增加PCF8574芯片使其支持IIC总线. 支持IIC总线的1602显示屏有四个引脚:</p>
<table>
<thead>
<tr>
<th>LCD1602引脚</th>
<th>VCC</th>
<th>GND</th>
<th>SDA</th>
<th>SCL</th>
</tr>
</thead>
<tbody><tr>
<td>对应连接的Arduino引脚</td>
<td>5V</td>
<td>GND</td>
<td>SDA</td>
<td>SCL</td>
</tr>
</tbody></table>
<p>通过<code>LiquidCrystal_I2C</code>库, 我们可以很方便地通过IIC总线驱动LCD1602显示屏. </p>
<h2 id="2-安装LiquidCrystal-I2C库"><a href="#2-安装LiquidCrystal-I2C库" class="headerlink" title="2.安装LiquidCrystal_I2C库"></a>2.安装<code>LiquidCrystal_I2C</code>库</h2><p>新版Arduino IDE提供了库管理器, 可以很方便地在左侧边栏的库管理搜索并添加<code>LiquidCrystal_I2C</code>库.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://resources.starsac.cn/2024/10/lcd1602%20(1).png"
                      alt="添加库文件"
                ></p>
<p>也可以通过<a class="link"   href="https://github.com/johnrickman/LiquidCrystal_I2C" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>页面下载<code>.zip</code>文件导入Arduino IDE进行安装.</p>
<h2 id="3-连接硬件"><a href="#3-连接硬件" class="headerlink" title="3.连接硬件"></a>3.连接硬件</h2><p>按照表格依次将四根导线连接到Arduino开发板上.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://resources.starsac.cn/2024/10/lcd1602%20(2).png"
                      alt="连线图"
                ></p>
<h2 id="4-编写程序使用Arduino库"><a href="#4-编写程序使用Arduino库" class="headerlink" title="4.编写程序使用Arduino库"></a>4.编写程序使用Arduino库</h2><h4 id="41-包含库文件-创建对象"><a href="#41-包含库文件-创建对象" class="headerlink" title="41.包含库文件, 创建对象"></a>41.包含库文件, 创建对象</h4><p>在程序源代码开头, 我们需要包含<code>LiquidCrystal_I2C</code>库, 并且创建LCD对象.</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;LiquidCrystal_I2C.h&gt;</span></span></span><br><span class="line"><span class="comment">// 这里设置LCD地址为0x27, 有16列, 2行</span></span><br><span class="line">LiquidCrystal_I2C <span class="title function_">mylcd</span><span class="params">(<span class="number">0x27</span>, <span class="number">16</span>, <span class="number">2</span>)</span>;  </span><br></pre></td></tr></table></figure></div>

<h4 id="42-void-setup-函数"><a href="#42-void-setup-函数" class="headerlink" title="42.void setup()函数"></a>42.<code>void setup()</code>函数</h4><p>在<code>setup()</code>函数部分, 我们可以进行初始化, 开启背光等操作. </p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">    mylcd.init();		<span class="comment">// 初始化LCD</span></span><br><span class="line">    mylcd.backlight();	<span class="comment">// 打开背光</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="43-void-loop-函数"><a href="#43-void-loop-函数" class="headerlink" title="43.void loop()函数"></a>43.<code>void loop()</code>函数</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">    mylcd.setCursor(<span class="number">0</span>,<span class="number">0</span>);			<span class="comment">// 设置光标位置</span></span><br><span class="line">    mylcd.print(<span class="string">&quot;Hello World!&quot;</span>);	<span class="comment">// 打印文字</span></span><br><span class="line">    mylcd.print(analogRead(A0));	<span class="comment">// 输出变量的值</span></span><br><span class="line">  	mylcd.setCursor(<span class="number">4</span>,<span class="number">1</span>);			<span class="comment">// 可以任意设置光标的位置</span></span><br><span class="line">  	mylcd.print(<span class="string">&quot;by StarsAC&quot;</span>);</span><br><span class="line">    delay(<span class="number">1000</span>);</span><br><span class="line">    mylcd.clear();					<span class="comment">// 清除显示内容</span></span><br><span class="line">    delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="5-其他示例程序"><a href="#5-其他示例程序" class="headerlink" title="5.其他示例程序"></a>5.其他示例程序</h2><h4 id="51-使屏幕显示从串口发来的内容"><a href="#51-使屏幕显示从串口发来的内容" class="headerlink" title="51.使屏幕显示从串口发来的内容"></a>51.使屏幕显示从串口发来的内容</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Wire.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;LiquidCrystal_I2C.h&gt;</span></span></span><br><span class="line">LiquidCrystal_I2C <span class="title function_">mylcd</span><span class="params">(<span class="number">0x27</span>,<span class="number">16</span>,<span class="number">2</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  mylcd.init();</span><br><span class="line">  mylcd.backlight();</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);	<span class="comment">// 打开串口通讯, 设置波特率为9600</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Serial.available())&#123;	<span class="comment">// 当有数据从串口发来时</span></span><br><span class="line">    delay(<span class="number">100</span>);</span><br><span class="line">    mylcd.clear();</span><br><span class="line">    <span class="keyword">while</span> (Serial.available() &gt; <span class="number">0</span>)&#123;	<span class="comment">// 通过while循环读取所有串口数据</span></span><br><span class="line">      mylcd.write(Serial.read());		<span class="comment">// 将每个字符显示至LCD屏幕</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Hardware</category>
        <category>MCU</category>
      </categories>
      <tags>
        <tag>Hardware</tag>
        <tag>Arduino</tag>
      </tags>
  </entry>
</search>
